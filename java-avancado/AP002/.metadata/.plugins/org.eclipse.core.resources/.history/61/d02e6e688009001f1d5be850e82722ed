import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

import com.ecomerce.projeto.model.Role;
import com.ecomerce.projeto.model.Usuario;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Repository
@RequiredArgsConstructor
public class UserRepository {

    private final JdbcTemplate jdbcTemplate;

    @Transactional
    public Optional<Usuario> findByEmail(String email) {
        String findQuery = "SELECT u.id, u.email, u.senha, r.id as role_id, r.nome as role_nome "
            + "FROM usuarios u "
            + "LEFT JOIN usuario_roles ur ON u.id = ur.usuario_id "
            + "LEFT JOIN roles r ON ur.role_id = r.id "
            + "WHERE u.email=?";
        
        RowMapper<Usuario> rowMapper = (rs, rowNum) -> {
            Usuario usuario = new Usuario();
            usuario.setId(rs.getLong("id"));
            usuario.setEmail(rs.getString("email"));
            usuario.setSenha(rs.getString("senha"));
            
            // Create Role object and add it to the Usuario's roles set
            Set<Role> roles = new HashSet<>();
            do {
                Long roleId = rs.getLong("role_id");
                if (roleId != null) {
                    Role role = new Role();
                    role.setId(roleId);
                    role.setNome(rs.getString("role_nome"));
                    roles.add(role);
                }
            } while (rs.next());
            usuario.setRoles(roles);
            
            return usuario;
        };

        return jdbcTemplate.query(findQuery, rowMapper, email).stream().findFirst();
    }
}
